Initiation to Reactjs
**********************
----------------------


What is Reactjs:
*******************

Reactjs is a javascript libray developped by facebook since 2013. The philosophy of this library is to make build 
an  SPA (Single Page Application) application.
It manage only a user interface of the application.


Who use React:
-----------------
Facebook, Netflix, Instagram, Whatsapp, Airbnb etc..

******************

Start:
******************

This tuto guide you step by step to make you understand how to work react using typescript to build a small project 
which will give necessary competencies to become pro in react.

(https://reactjs.org/)
(https://www.typescriptlang.org/)

First of all we will check the requirements to develop react app.

Requirements:

- Nodejs (https://nodejs.org/en/)
- Git (https://git-scm.com/)
- Visual Studio Code (https://code.visualstudio.com/)

We verify now that everything are installed correctlly:
Open terminal command the following commands:

Check version of nodejs and npm
- node -v
- npm -v

Note: 
If the node package manager (npm) is not installed then install it:
$ npm install --global npm or npm install --g npm
(https://docs.npmjs.com/)

to uninstall a package the command is :
$ npm uninstall -g package_name
or 
$ npm uninstall --save-dev package_name
$ npm uninstall --save package_name


argument : --g tells to install the package global



Check version of nodejs
- git --version




Let's start now, we have installed the developpment tool and we are going to create our new project:

Install the react application developpment package Create-React-App
$ npm install -g create-react-app
(https://create-react-app.dev/)

This tool will help us to create the react app structure.

Open terminal and go to to your prefered workspace and follow the steps below:

$ npx create-react-app react-typescript-app --typescript

$ cd react-typescript-app

note:
/ react-typescript-app is name of the project 
/ argument --typescript used to work with Typescript

the command npx execute npm package binairies, in our case it execute create-react-app library by 

The comand generated the following structure :

- .git
- node_modules
- public
--- favicon.ico
--- index.html
--- logo192.png
--- logo512.png
--- manifest.json
--- robots.txt
- src
--- App.css
--- App.test.tsx
--- App.tsx
--- index.css
--- index.tsx
--- logo.svg
--- react-app-env.d.ts
--- serviceWorker.ts
- .gitignore
- package.json
- package-lock.json
- README.md
- tsconfig.json

Exlanantion of each part:

TODO: Explain the structure

* tsconfig.json declare the root of typescript project and specifies compiler parameters to compile the project.
* public is the folder in where the static file reside such as the index.html, the following tag div in the file
    `<div id="root"></div>` is a Reactjs entry point
* src is a folder that will hold all app code: component, style, images etc...
    the file `index.tsx` in the src foler is a react main program 
    the main component is executed using this code `ReactDOM.render(<App />, document.getElementById('root'));`
    Everything in react is component and only one the root component here is App.

Note :
.ts are regular typescript file and .tsx are typescript syntax extension file
All the component we will create in this tutorial will have .tsx as extension




Inportant packages:
------------
Router:
We need a library to manage page routing.
$ npm install --save react-router-dom 

# As we use typescript in our project we need also the @type package for react-router-dom. 
We can say that @types are the interface between Javascript and Typescript
# We save @types in devDependencies
$ npm install --save-dev @types/react-router-dom
(http://definitelytyped.org/)


(https://reacttraining.com/react-router/web/guides/quick-start)

Bootstrap:
Boostrap is used to create the user interface:
$ npm install --save bootstrap

import 'bootstrap/dist/css/bootstrap.min.css';

(https://getbootstrap.com/)

icon: 
$ npm install --save font-awesome

(https://fontawesome.com/icons?d=gallery)

note: 
to import the css use following
import 'font-awesome/css/font-awesome.min.css';

Extra packages:
------------



Installing TSLint-React:
$ npm install --save-dev tslint tslint-react

Type the following command to generate a tslint.json file with default options.
$ npx tslint --init

* tslint.json is the linter settings to be used by TSLint

Replace this file with the following:

{
    "defaultSeverity": "error",
    "extends": [
        "tslint-react"
    ],
    "jsRules": {
    },
    "rules": {
        "member-access": false,
        "ordered-imports": false,
        "quotemark": false,
        "no-console": false,
        "semicolon": false,
        "jsx-no-lambda": false
    },
    "rulesDirectory": [
    ],
    "linterOptions": {
        "exclude": [
            "config/**/*.js",
            "node_modules/**/*.ts"
       ]
   }
}




Note: 
argument --save is used to save the package into "dependencies" section
and --save-dev save package in "devDependencies"
I will explain later, for now keep going on



The tool tslint checks typescript code for readability, maintainability, and functionality errors
(https://palantir.github.io/tslint/)

tslint-react: Lint rules related to React & JSX for TSLint.
(https://github.com/palantir/tslint-react)


We will add also Prettier:
Prettier is a fully automatic �style guide� worth adopting.
npm install prettier --save-dev

(https://prettier.io/docs/en/install.html)






Launch app:
-------------
Open the app in vs code and open a new terminal by clicking on menu "Terminal->New terminal"
So you can close your favorite terminal, we will vscode terminal to manage app.

Type the command:
$ npm start 
to launch the application

If everything is going well, you will see the page with logo and theh text "Edit src/App.tsx and save to reload."
We will change the text. For that open the file "App.tsx" in src folder
Delete the text and add this "My first react app using typescript." and save.

The page is refreshed automatically.


Now we will create a CRUD component.

Create a new folder "components" in "/src" folder

+-- /src
|   +-- /components

Delete code in App.tsx and we will create a class component instead, you can delete the other App.test.tsx and App.css files:

we will import the following files to build a beautify user interface:
import 'bootstrap/dist/css/bootstrap.min.css';
import 'font-awesome/css/font-awesome.min.css';

TODO: code here...

(https://getbootstrap.com/docs/4.4/examples/dashboard/)


Note:
component class must implement a render method which is used by reactjs to render the UI in the broswer

Reactjs Lifecyle :
-----------------
- init
- update
- destruct


-----------------------------------------
usefull links :
https://github.com/typescript-cheatsheets/react-typescript-cheatsheet#reacttypescript-cheatsheets

https://code.visualstudio.com/docs/nodejs/reactjs-tutorial


## Test Unit

npm i --save-dev types/jest ts-jest jest
npm i --save-dev enzyme enzyme-adapter-react-16 @types/enzyme enzyme-to-json 
npm i --save-dev react-test-renderer 
create a a jest.config.js in root folder and add the following code :
```
module.exports = {
  roots: ["<rootDir>/src"],
  transform: {
    "^.+\\.tsx?$": "ts-jest",
  },
  testRegex: "(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$",
  moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json", "node"],
};
```

https://github.com/basarat/typescript-book/blob/master/docs/testing/jest.md#step-2-configure-jest

Configure Enzyme:
create setupTests.js in src folder and add the below code:
```
import { configure } from 'enzyme';
import * as Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });
```